{"version":3,"file":"static/js/597.1a2e2608.chunk.js","mappings":"sMAEaA,E,OAAOC,EAAAA,GAAH,8O,SCEV,SAASC,EAAT,GAA+B,IAAVC,EAAS,EAATA,MACpBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACL,EAAD,UACGG,EAAMG,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACvB,OACE,yBACE,SAAC,KAAD,CACEC,GAA0B,MAAtBN,EAASO,SAAT,iBAAsCH,GAAtC,UAAgDA,GACpDI,MAAO,CAAEC,KAAMT,GAFjB,gBAIGG,QAJH,IAIGA,EAAAA,EAASE,KALLD,EASZ,KAGN,C,uJCrBYM,E,OAAOb,EAAAA,KAAH,6Y,SCMjB,SAASc,IAAU,IAAD,EAChB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAgCL,EAAAA,EAAAA,WAAS,GAAzC,eAAOM,EAAP,KAAiBC,EAAjB,KACA,GAA8BP,EAAAA,EAAAA,WAAS,GAAvC,eAAOQ,EAAP,KAAgBC,EAAhB,KACIC,EAAK,UAAGN,EAAaO,IAAI,gBAApB,QAAgC,GA6BzC,OA3BAC,EAAAA,EAAAA,YAAU,WACHF,IACLD,GAAW,IACXI,EAAAA,EAAAA,IAASH,GACNI,MAAK,SAAUC,GACTA,EAASC,KAAKC,QAAQ,GACtBV,GAAY,GADcA,GAAY,GAE3CL,EAASa,EAASC,KAAKC,QACxB,IACAC,OAAM,WACLC,IAAAA,OAAAA,QAAwB,yCACzB,IACAC,SAAQ,WACPX,GAAW,EACZ,IACJ,GAAE,CAACC,KAaF,iCACE,UAACZ,EAAD,CAAMuB,SAZV,SAAmBC,GACjBA,EAAGC,iBACH,IAAIC,EAAQF,EAAGG,OAAOC,SAASC,MAAMH,MAAMI,OAC3C,IAAKJ,EACH,OAAOL,IAAAA,OAAAA,QAAwB,sIAEjCd,EAAgB,CAAEK,MAAOc,IACzBF,EAAGG,OAAOI,OACX,EAIG,WACE,kBAAOC,KAAK,OAAOrC,KAAK,WACxB,mBAAQqC,KAAK,SAAb,wBAGAtB,IAAW,SAACtB,EAAA,EAAD,CAAWC,MAAOc,IAC9BK,IAAY,2CACZE,IAAW,SAACuB,EAAA,EAAD,MAGjB,CAED,OAAeC,EAAAA,EAAAA,MAAKjC,E,oKCtDdkC,EAAM,8BACNC,EAAM,mCAEL,SAASC,IACd,OAAOC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,sCAA8CC,GACtD,CAEM,SAASG,EAAgBC,GAC9B,OAAOF,EAAAA,EAAAA,IAAA,UAAaH,EAAb,mBAA2BK,EAA3B,oBAA+CJ,GACvD,CAEM,SAASK,EAAgBD,GAC9B,OAAOF,EAAAA,EAAAA,IAAA,UAAaH,EAAb,mBAA2BK,EAA3B,4BAAuDJ,GAC/D,CAEM,SAASM,EAAgBF,GAC9B,OAAOF,EAAAA,EAAAA,IAAA,UAAaH,EAAb,mBAA2BK,EAA3B,4BAAuDJ,GAC/D,CAEM,SAASrB,EAASH,GACvB,OAAO0B,EAAAA,EAAAA,IAAA,UAAaH,EAAb,gCAAwCvB,EAAxC,oBAAyDwB,GACjE,C","sources":["components/ListFilms/ListFilms.styled.jsx","components/ListFilms/ListFilms.jsx","pages/styles/Movie.styled.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n\n  a {\n    text-decoration: none;\n    color: #da6e80;\n    font-size: 18px;\n    line-height: 1.5;\n    font-weight: 500;\n\n    &:hover {\n      color: #0b7ee4;\n    }\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { List } from './ListFilms.styled';\nimport PropTypes from 'prop-types';\n\nexport function ListFilms({ films }) {\n  const location = useLocation();\n\n  return (\n    <List>\n      {films.map(({ title, id, name }) => {\n        return (\n          <li key={id}>\n            <Link\n              to={location.pathname === '/' ? `movies/${id}` : `${id}`}\n              state={{ from: location }}\n            >\n              {title ?? name}\n            </Link>\n          </li>\n        );\n      })}\n    </List>\n  );\n}\n\nListFilms.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n    })\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 20px;\n\n  input {\n    min-height: 45px;\n    padding: 16px 24px;\n    font-size: 20px;\n    font-weight: 500;\n    border: 1px solid purple;\n    border-radius: 15px;\n  }\n\n  button {\n    min-height: 45px;\n    border: 1px solid green;\n    border-radius: 15px;\n    background-color: aqua;\n    cursor: pointer;\n    padding: 4px 16px;\n  }\n`;\n","import React, { memo, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { getMovie } from 'services/api';\nimport { ListFilms } from 'components/ListFilms/ListFilms';\nimport Loading from 'components/Loading/Loading';\nimport { Form } from './styles/Movie.styled';\n\nfunction Movies() {\n  const [movie, setMovie] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [notFound, setNotFound] = useState(false);\n  const [loading, setLoading] = useState(false);\n  let query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (!query) return;\n    setLoading(true);\n    getMovie(query)\n      .then(function (response) {\n        if (!response.data.results[0]) setNotFound(true);\n        else setNotFound(false);\n        setMovie(response.data.results);\n      })\n      .catch(function () {\n        Notiflix.Notify.failure('Happened ERROR, TRY AGAIN IN SOME TIME');\n      })\n      .finally(function () {\n        setLoading(false);\n      });\n  }, [query]);\n\n  function inputFunc(ev) {\n    ev.preventDefault();\n    let value = ev.target.elements.input.value.trim();\n    if (!value) {\n      return Notiflix.Notify.failure('Поле не может быть пустым');\n    }\n    setSearchParams({ query: value });\n    ev.target.reset();\n  }\n\n  return (\n    <>\n      <Form onSubmit={inputFunc}>\n        <input type=\"text\" name=\"input\" />\n        <button type=\"submit\">Search</button>\n      </Form>\n\n      {!loading && <ListFilms films={movie} />}\n      {notFound && <p>Film not found!</p>}\n      {loading && <Loading />}\n    </>\n  );\n}\n\nexport default memo(Movies);\n","import axios from 'axios';\n\nconst API = 'https://api.themoviedb.org/';\nconst KEY = 'c83afea588f6df33499ccee027813248';\n\nexport function getTrending() {\n  return axios.get(`${API}3/trending/all/day?api_key=${KEY}`);\n}\n\nexport function getMovieDetails(movie_id) {\n  return axios.get(`${API}3/movie/${movie_id}?api_key=${KEY}`);\n}\n\nexport function getMovieCredits(movie_id) {\n  return axios.get(`${API}3/movie/${movie_id}/credits?api_key=${KEY}`);\n}\n\nexport function getMovieReviews(movie_id) {\n  return axios.get(`${API}3/movie/${movie_id}/reviews?api_key=${KEY}`);\n}\n\nexport function getMovie(query) {\n  return axios.get(`${API}3/search/movie?query=${query}&api_key=${KEY}`);\n}\n"],"names":["List","styled","ListFilms","films","location","useLocation","map","title","id","name","to","pathname","state","from","Form","Movies","useState","movie","setMovie","useSearchParams","searchParams","setSearchParams","notFound","setNotFound","loading","setLoading","query","get","useEffect","getMovie","then","response","data","results","catch","Notiflix","finally","onSubmit","ev","preventDefault","value","target","elements","input","trim","reset","type","Loading","memo","API","KEY","getTrending","axios","getMovieDetails","movie_id","getMovieCredits","getMovieReviews"],"sourceRoot":""}